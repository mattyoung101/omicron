syntax = "proto3";

// This file contains all the messages we send/receive with Omicontrol over TCP

message RDRect {
    int32 x = 1;
    int32 y = 2;
    int32 width = 3;
    int32 height = 4;
}

message RDPoint {
    int32 x = 1;
    int32 y = 2;
}

message RDThreshold {
    int32 objectId = 1;
    repeated int32 min = 2;
    repeated int32 max = 3;
}

// Whenever a debug frame is encoded, this is sent to the remote client to be rendered over a TCP socket.
// It may also include geometries that the remote client is instructed to draw such as rectangles or circles
// (this is because it's much easier to get the remote JavaFX app to draw geometries than to do it manually on a JPEG buffer)
message DebugFrame {
    bytes defaultImage = 1; // the encoded image of just the normal view from the camera
    bytes ballThreshImage = 2; // the zlib encoded buffer of the ball's binary threshold image
    float temperature = 3; // the temperature of the CPU on the Pi
    RDRect ballRect = 4; // the bounding box of the ball
    RDPoint ballCentroid = 5; // the centroid of the ball
}

// This can either be a command sent by Omicontrol to Omicam, or a response from Omicam to Omicontrol
message DebugCommand {
    // List of commands:
    // CMD_POWER_OFF: ask Omicam to shutdown the Jetson
    // CMD_POWER_REBOOT: ask Omicam to reboot the Jetson
    // CMD_THRESHOLDS_GET_ALL: return the current thresholds for all object
    // CMD_THRESHOLDS_SET: set the specified object's threshold to the given value
    // CMD_THRESHOLDS_WRITE_DISK: writes the current thresholds to the INI file and then to disk
    // CMD_MOVE_TO_XY: move to the given (X,Y) coordinates on the field, will need to be forwarded to ESP
    // CMD_MOVE_RESET: move to starting position
    // CMD_MOVE_HALT: stops the robot in place, braking
    // CMD_MOVE_RESUME: allows the robot to move again
    // CMD_MOVE_ORIENT: orient to a specific direction
    int32 messageId = 1;

    // may be set if CMD_MOVE_TO_XY is the messageId
    RDPoint coords = 2;
    // may be set if CMD_MOVE_ORIENT is the messageId
    float orientation = 3;
    // may be sent if CMD_THRESHOLDS_GET_ALL is the messageId
    repeated RDThreshold allThresholds = 4;
    // may be sent if CMD_THRESHOLD_GET or CMD_THRESHOLD_SET is the messageId
    repeated RDThreshold threshold = 5;
}