syntax = "proto3";

// This file contains all the messages we send/receive with Omicontrol over TCP

message RDRect {
    int32 x = 1;
    int32 y = 2;
    int32 width = 3;
    int32 height = 4;
}

message RDPoint {
    int32 x = 1;
    int32 y = 2;
}

message RDPointF {
    float x = 1;
    float y = 2;
}

// Contains the colour channel values for the min and max of a particular threshold
message RDThreshold {
    repeated int32 min = 2;
    repeated int32 max = 3;
}

// contains information about a robot
message RDRobot {
    RDPointF position = 1;
    float orientation = 2;
    string fsmState = 3;
}

message RDObstacle {
    RDPointF susTriBegin = 1;
    RDPointF susTriEnd = 2;
    RDPointF centroid = 3;
}

// Whenever a debug frame is encoded, this is sent to the remote client to be rendered over a TCP socket.
// It may also include geometries that the remote client is instructed to draw such as rectangles or circles
// (this is because it's much easier to get the remote JavaFX app to draw geometries than to do it manually on a JPEG buffer)
message DebugFrame {
    // the encoded image of just the normal view from the camera
    bytes defaultImage = 1;
    // the zlib encoded buffer of the threshold image (not the ball, kept for legacy reasons)
    bytes ballThreshImage = 2;
    // the temperature of the CPU on the SBC
    float temperature = 3;
    // the bounding box of the object (not the ball, kept for legacy reasons)
    RDRect ballRect = 4;
    // the centroid of the ball
    RDPoint ballCentroid = 5;
    // the current FPS of the camera
    int32 fps = 6;
    // width of both frames
    int32 frameWidth = 7;
    // height of both frames
    int32 frameHeight = 8;
    // the crop rectangle, or all zeroes if cropping is disabled
    RDRect cropRect = 9;
    // non-dewarped rays from localiser
    repeated double rays = 10;
    // dewarped rays from localiser
    repeated double dewarpedRays = 11;
    // mirror radius used by localiser
    int32 mirrorRadius = 12;
    // position, orientation and FSM info for robots on the feld
    repeated RDRobot robots = 13;
    // distance between rays in radians
    float rayInterval = 15;
    // average number of localiser evaluations
    int32 localiserEvals = 16;
    // NLopt returned status, for example, "MAXTIME_REACHED"
    string localiserStatus = 18;
    // ball position in field coords
    RDPointF ballPos = 19;
    // visited positions by the Subplex optimiser
    repeated RDPointF localiserVisitedPoints = 20;
    // true or false for each ray if it was classified as suspicious
    repeated bool raysSuspicious = 21;
    // localiser rate in Hz
    int32 localiserRate = 22;
    // yellow goal position in field coordinates
    RDPointF yellowGoalPos = 23;
    // blue goal position in field coordinates
    RDPointF blueGoalPos = 24;
    // if the yellow goal position is known (it's visible)
    bool isYellowKnown = 25;
    // if the blue goal position is known
    bool isBallKnown = 26;
    // if the ball position is known
    bool isBlueKnown = 27;
    // the robot's position according to the goal estimate
    RDPointF goalEstimate = 28;
    // localiser min estimate bounds if goal is present
    RDPointF estimateMinBounds = 29;
    // localiser max estimate bounds if goal is present
    RDPointF estimateMaxBounds = 30;
    // cutoff for which rays are considered suspicious (LOCALISER_SUS_IQR_MUL * IQR)
    float susRayCutoff = 31;
    // detected obstacle
    repeated RDObstacle detectedObstacles = 32;
}

// This can either be a command sent by Omicontrol to Omicam, or a response from Omicam to Omicontrol
message DebugCommand {
    // For a list of commands, see the enums in defines.h or Values.kt
    int32 messageId = 1;

    // may be set if CMD_MOVE_TO_XY is the messageId
    // contains the field coordinates that the robot should move to
    RDPoint coords = 2;
    // may be set if CMD_MOVE_ORIENT is the messageId
    // contains the 0-360 degree orientation the robot should turn to
    float orientation = 3;
    // may be sent if CMD_THRESHOLDS_GET_ALL is the messageId
    // contains an array of all the thresholds values in the camera currently
    repeated RDThreshold allThresholds = 4;
    // may be set if CMD_THRESHOLDS_SELECT is the messageId
    // contains the ID of the field object (eg BALL, YELLOW_GOAL) that this message is referring to
    int32 objectId = 5;
    // may be set if CMD_THRESHOLDS_SELECT is the messageId
    // contains whether or not this threshold is for the minimum or maximum (true if min, false if max)
    bool minMax = 6;
    // may be set if CMD_THRESHOLDS_SELECT is the messageId
    // contains the index of the colour channel (e.g. 0 = R, 1 = G, 2 = B)
    int32 colourChannel = 7;
    // may be set if CMD_THRESHOLD_SET
    // would be the value of the threshold
    int32 value = 8;
    // may be set if any of the CMD_MOVE are set
    // if <= -1 it applies to all robots, otherwise it is the robot id of the target robot
    int32 robotId = 9;
    // may be set if CMD_SET_SEND_FRAMES is the messageId
    bool isEnabled = 10;
}

// Container for messages, contains exactly one sub message
message RDMsgFrame {
    DebugFrame frame = 1;
    DebugCommand command = 2;

    // hack hack hack: so apparently "oneof" doesn't work at all hence this is required
    int32 whichMessage = 3;
}