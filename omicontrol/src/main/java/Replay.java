// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Replay.proto

public final class Replay {
  private Replay() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ReplayFrameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ReplayFrame)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * time in microseconds since last ReplayFrame
     * </pre>
     *
     * <code>optional uint32 timestamp = 1;</code>
     */
    int getTimestamp();

    /**
     * <pre>
     * index of the frame in the replay file
     * </pre>
     *
     * <code>optional uint32 frameIdx = 2;</code>
     */
    int getFrameIdx();

    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    java.util.List<RemoteDebug.RDRobot> 
        getRobotsList();
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    RemoteDebug.RDRobot getRobots(int index);
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    int getRobotsCount();
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    java.util.List<? extends RemoteDebug.RDRobotOrBuilder> 
        getRobotsOrBuilderList();
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    RemoteDebug.RDRobotOrBuilder getRobotsOrBuilder(
        int index);

    /**
     * <pre>
     * average number of localiser evaluations
     * </pre>
     *
     * <code>optional int32 localiserEvals = 4;</code>
     */
    int getLocaliserEvals();

    /**
     * <pre>
     * ball position in field coords
     * </pre>
     *
     * <code>optional .RDPointF ballPos = 5;</code>
     */
    boolean hasBallPos();
    /**
     * <pre>
     * ball position in field coords
     * </pre>
     *
     * <code>optional .RDPointF ballPos = 5;</code>
     */
    RemoteDebug.RDPointF getBallPos();
    /**
     * <pre>
     * ball position in field coords
     * </pre>
     *
     * <code>optional .RDPointF ballPos = 5;</code>
     */
    RemoteDebug.RDPointFOrBuilder getBallPosOrBuilder();

    /**
     * <pre>
     * localiser rate in Hz
     * </pre>
     *
     * <code>optional int32 localiserRate = 6;</code>
     */
    int getLocaliserRate();

    /**
     * <pre>
     * yellow goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF yellowGoalPos = 7;</code>
     */
    boolean hasYellowGoalPos();
    /**
     * <pre>
     * yellow goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF yellowGoalPos = 7;</code>
     */
    RemoteDebug.RDPointF getYellowGoalPos();
    /**
     * <pre>
     * yellow goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF yellowGoalPos = 7;</code>
     */
    RemoteDebug.RDPointFOrBuilder getYellowGoalPosOrBuilder();

    /**
     * <pre>
     * blue goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF blueGoalPos = 8;</code>
     */
    boolean hasBlueGoalPos();
    /**
     * <pre>
     * blue goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF blueGoalPos = 8;</code>
     */
    RemoteDebug.RDPointF getBlueGoalPos();
    /**
     * <pre>
     * blue goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF blueGoalPos = 8;</code>
     */
    RemoteDebug.RDPointFOrBuilder getBlueGoalPosOrBuilder();

    /**
     * <pre>
     * if the yellow goal position is known (it's visible)
     * </pre>
     *
     * <code>optional bool isYellowKnown = 9;</code>
     */
    boolean getIsYellowKnown();

    /**
     * <pre>
     * if the blue goal position is known
     * </pre>
     *
     * <code>optional bool isBallKnown = 10;</code>
     */
    boolean getIsBallKnown();

    /**
     * <pre>
     * if the ball position is known
     * </pre>
     *
     * <code>optional bool isBlueKnown = 11;</code>
     */
    boolean getIsBlueKnown();

    /**
     * <pre>
     * the robot's position according to the goal estimate
     * </pre>
     *
     * <code>optional .RDPointF goalEstimate = 12;</code>
     */
    boolean hasGoalEstimate();
    /**
     * <pre>
     * the robot's position according to the goal estimate
     * </pre>
     *
     * <code>optional .RDPointF goalEstimate = 12;</code>
     */
    RemoteDebug.RDPointF getGoalEstimate();
    /**
     * <pre>
     * the robot's position according to the goal estimate
     * </pre>
     *
     * <code>optional .RDPointF goalEstimate = 12;</code>
     */
    RemoteDebug.RDPointFOrBuilder getGoalEstimateOrBuilder();

    /**
     * <pre>
     * localiser min estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMinBounds = 13;</code>
     */
    boolean hasEstimateMinBounds();
    /**
     * <pre>
     * localiser min estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMinBounds = 13;</code>
     */
    RemoteDebug.RDPointF getEstimateMinBounds();
    /**
     * <pre>
     * localiser min estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMinBounds = 13;</code>
     */
    RemoteDebug.RDPointFOrBuilder getEstimateMinBoundsOrBuilder();

    /**
     * <pre>
     * localiser max estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMaxBounds = 14;</code>
     */
    boolean hasEstimateMaxBounds();
    /**
     * <pre>
     * localiser max estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMaxBounds = 14;</code>
     */
    RemoteDebug.RDPointF getEstimateMaxBounds();
    /**
     * <pre>
     * localiser max estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMaxBounds = 14;</code>
     */
    RemoteDebug.RDPointFOrBuilder getEstimateMaxBoundsOrBuilder();
  }
  /**
   * <pre>
   * The ReplayFrame is essentially a very stripped down version of DebugFrame with only the essentials for displaying
   * data in the Field View in Omicontrol
   * </pre>
   *
   * Protobuf type {@code ReplayFrame}
   */
  public  static final class ReplayFrame extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ReplayFrame)
      ReplayFrameOrBuilder {
    // Use ReplayFrame.newBuilder() to construct.
    private ReplayFrame(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReplayFrame() {
      timestamp_ = 0;
      frameIdx_ = 0;
      robots_ = java.util.Collections.emptyList();
      localiserEvals_ = 0;
      localiserRate_ = 0;
      isYellowKnown_ = false;
      isBallKnown_ = false;
      isBlueKnown_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ReplayFrame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              timestamp_ = input.readUInt32();
              break;
            }
            case 16: {

              frameIdx_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                robots_ = new java.util.ArrayList<RemoteDebug.RDRobot>();
                mutable_bitField0_ |= 0x00000004;
              }
              robots_.add(
                  input.readMessage(RemoteDebug.RDRobot.parser(), extensionRegistry));
              break;
            }
            case 32: {

              localiserEvals_ = input.readInt32();
              break;
            }
            case 42: {
              RemoteDebug.RDPointF.Builder subBuilder = null;
              if (ballPos_ != null) {
                subBuilder = ballPos_.toBuilder();
              }
              ballPos_ = input.readMessage(RemoteDebug.RDPointF.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ballPos_);
                ballPos_ = subBuilder.buildPartial();
              }

              break;
            }
            case 48: {

              localiserRate_ = input.readInt32();
              break;
            }
            case 58: {
              RemoteDebug.RDPointF.Builder subBuilder = null;
              if (yellowGoalPos_ != null) {
                subBuilder = yellowGoalPos_.toBuilder();
              }
              yellowGoalPos_ = input.readMessage(RemoteDebug.RDPointF.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(yellowGoalPos_);
                yellowGoalPos_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              RemoteDebug.RDPointF.Builder subBuilder = null;
              if (blueGoalPos_ != null) {
                subBuilder = blueGoalPos_.toBuilder();
              }
              blueGoalPos_ = input.readMessage(RemoteDebug.RDPointF.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(blueGoalPos_);
                blueGoalPos_ = subBuilder.buildPartial();
              }

              break;
            }
            case 72: {

              isYellowKnown_ = input.readBool();
              break;
            }
            case 80: {

              isBallKnown_ = input.readBool();
              break;
            }
            case 88: {

              isBlueKnown_ = input.readBool();
              break;
            }
            case 98: {
              RemoteDebug.RDPointF.Builder subBuilder = null;
              if (goalEstimate_ != null) {
                subBuilder = goalEstimate_.toBuilder();
              }
              goalEstimate_ = input.readMessage(RemoteDebug.RDPointF.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(goalEstimate_);
                goalEstimate_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              RemoteDebug.RDPointF.Builder subBuilder = null;
              if (estimateMinBounds_ != null) {
                subBuilder = estimateMinBounds_.toBuilder();
              }
              estimateMinBounds_ = input.readMessage(RemoteDebug.RDPointF.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(estimateMinBounds_);
                estimateMinBounds_ = subBuilder.buildPartial();
              }

              break;
            }
            case 114: {
              RemoteDebug.RDPointF.Builder subBuilder = null;
              if (estimateMaxBounds_ != null) {
                subBuilder = estimateMaxBounds_.toBuilder();
              }
              estimateMaxBounds_ = input.readMessage(RemoteDebug.RDPointF.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(estimateMaxBounds_);
                estimateMaxBounds_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          robots_ = java.util.Collections.unmodifiableList(robots_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Replay.internal_static_ReplayFrame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Replay.internal_static_ReplayFrame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Replay.ReplayFrame.class, Replay.ReplayFrame.Builder.class);
    }

    private int bitField0_;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private int timestamp_;
    /**
     * <pre>
     * time in microseconds since last ReplayFrame
     * </pre>
     *
     * <code>optional uint32 timestamp = 1;</code>
     */
    public int getTimestamp() {
      return timestamp_;
    }

    public static final int FRAMEIDX_FIELD_NUMBER = 2;
    private int frameIdx_;
    /**
     * <pre>
     * index of the frame in the replay file
     * </pre>
     *
     * <code>optional uint32 frameIdx = 2;</code>
     */
    public int getFrameIdx() {
      return frameIdx_;
    }

    public static final int ROBOTS_FIELD_NUMBER = 3;
    private java.util.List<RemoteDebug.RDRobot> robots_;
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    public java.util.List<RemoteDebug.RDRobot> getRobotsList() {
      return robots_;
    }
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    public java.util.List<? extends RemoteDebug.RDRobotOrBuilder> 
        getRobotsOrBuilderList() {
      return robots_;
    }
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    public int getRobotsCount() {
      return robots_.size();
    }
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    public RemoteDebug.RDRobot getRobots(int index) {
      return robots_.get(index);
    }
    /**
     * <pre>
     * robot information, main thing we want to display
     * </pre>
     *
     * <code>repeated .RDRobot robots = 3;</code>
     */
    public RemoteDebug.RDRobotOrBuilder getRobotsOrBuilder(
        int index) {
      return robots_.get(index);
    }

    public static final int LOCALISEREVALS_FIELD_NUMBER = 4;
    private int localiserEvals_;
    /**
     * <pre>
     * average number of localiser evaluations
     * </pre>
     *
     * <code>optional int32 localiserEvals = 4;</code>
     */
    public int getLocaliserEvals() {
      return localiserEvals_;
    }

    public static final int BALLPOS_FIELD_NUMBER = 5;
    private RemoteDebug.RDPointF ballPos_;
    /**
     * <pre>
     * ball position in field coords
     * </pre>
     *
     * <code>optional .RDPointF ballPos = 5;</code>
     */
    public boolean hasBallPos() {
      return ballPos_ != null;
    }
    /**
     * <pre>
     * ball position in field coords
     * </pre>
     *
     * <code>optional .RDPointF ballPos = 5;</code>
     */
    public RemoteDebug.RDPointF getBallPos() {
      return ballPos_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : ballPos_;
    }
    /**
     * <pre>
     * ball position in field coords
     * </pre>
     *
     * <code>optional .RDPointF ballPos = 5;</code>
     */
    public RemoteDebug.RDPointFOrBuilder getBallPosOrBuilder() {
      return getBallPos();
    }

    public static final int LOCALISERRATE_FIELD_NUMBER = 6;
    private int localiserRate_;
    /**
     * <pre>
     * localiser rate in Hz
     * </pre>
     *
     * <code>optional int32 localiserRate = 6;</code>
     */
    public int getLocaliserRate() {
      return localiserRate_;
    }

    public static final int YELLOWGOALPOS_FIELD_NUMBER = 7;
    private RemoteDebug.RDPointF yellowGoalPos_;
    /**
     * <pre>
     * yellow goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF yellowGoalPos = 7;</code>
     */
    public boolean hasYellowGoalPos() {
      return yellowGoalPos_ != null;
    }
    /**
     * <pre>
     * yellow goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF yellowGoalPos = 7;</code>
     */
    public RemoteDebug.RDPointF getYellowGoalPos() {
      return yellowGoalPos_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : yellowGoalPos_;
    }
    /**
     * <pre>
     * yellow goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF yellowGoalPos = 7;</code>
     */
    public RemoteDebug.RDPointFOrBuilder getYellowGoalPosOrBuilder() {
      return getYellowGoalPos();
    }

    public static final int BLUEGOALPOS_FIELD_NUMBER = 8;
    private RemoteDebug.RDPointF blueGoalPos_;
    /**
     * <pre>
     * blue goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF blueGoalPos = 8;</code>
     */
    public boolean hasBlueGoalPos() {
      return blueGoalPos_ != null;
    }
    /**
     * <pre>
     * blue goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF blueGoalPos = 8;</code>
     */
    public RemoteDebug.RDPointF getBlueGoalPos() {
      return blueGoalPos_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : blueGoalPos_;
    }
    /**
     * <pre>
     * blue goal position in field coordinates
     * </pre>
     *
     * <code>optional .RDPointF blueGoalPos = 8;</code>
     */
    public RemoteDebug.RDPointFOrBuilder getBlueGoalPosOrBuilder() {
      return getBlueGoalPos();
    }

    public static final int ISYELLOWKNOWN_FIELD_NUMBER = 9;
    private boolean isYellowKnown_;
    /**
     * <pre>
     * if the yellow goal position is known (it's visible)
     * </pre>
     *
     * <code>optional bool isYellowKnown = 9;</code>
     */
    public boolean getIsYellowKnown() {
      return isYellowKnown_;
    }

    public static final int ISBALLKNOWN_FIELD_NUMBER = 10;
    private boolean isBallKnown_;
    /**
     * <pre>
     * if the blue goal position is known
     * </pre>
     *
     * <code>optional bool isBallKnown = 10;</code>
     */
    public boolean getIsBallKnown() {
      return isBallKnown_;
    }

    public static final int ISBLUEKNOWN_FIELD_NUMBER = 11;
    private boolean isBlueKnown_;
    /**
     * <pre>
     * if the ball position is known
     * </pre>
     *
     * <code>optional bool isBlueKnown = 11;</code>
     */
    public boolean getIsBlueKnown() {
      return isBlueKnown_;
    }

    public static final int GOALESTIMATE_FIELD_NUMBER = 12;
    private RemoteDebug.RDPointF goalEstimate_;
    /**
     * <pre>
     * the robot's position according to the goal estimate
     * </pre>
     *
     * <code>optional .RDPointF goalEstimate = 12;</code>
     */
    public boolean hasGoalEstimate() {
      return goalEstimate_ != null;
    }
    /**
     * <pre>
     * the robot's position according to the goal estimate
     * </pre>
     *
     * <code>optional .RDPointF goalEstimate = 12;</code>
     */
    public RemoteDebug.RDPointF getGoalEstimate() {
      return goalEstimate_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : goalEstimate_;
    }
    /**
     * <pre>
     * the robot's position according to the goal estimate
     * </pre>
     *
     * <code>optional .RDPointF goalEstimate = 12;</code>
     */
    public RemoteDebug.RDPointFOrBuilder getGoalEstimateOrBuilder() {
      return getGoalEstimate();
    }

    public static final int ESTIMATEMINBOUNDS_FIELD_NUMBER = 13;
    private RemoteDebug.RDPointF estimateMinBounds_;
    /**
     * <pre>
     * localiser min estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMinBounds = 13;</code>
     */
    public boolean hasEstimateMinBounds() {
      return estimateMinBounds_ != null;
    }
    /**
     * <pre>
     * localiser min estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMinBounds = 13;</code>
     */
    public RemoteDebug.RDPointF getEstimateMinBounds() {
      return estimateMinBounds_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : estimateMinBounds_;
    }
    /**
     * <pre>
     * localiser min estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMinBounds = 13;</code>
     */
    public RemoteDebug.RDPointFOrBuilder getEstimateMinBoundsOrBuilder() {
      return getEstimateMinBounds();
    }

    public static final int ESTIMATEMAXBOUNDS_FIELD_NUMBER = 14;
    private RemoteDebug.RDPointF estimateMaxBounds_;
    /**
     * <pre>
     * localiser max estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMaxBounds = 14;</code>
     */
    public boolean hasEstimateMaxBounds() {
      return estimateMaxBounds_ != null;
    }
    /**
     * <pre>
     * localiser max estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMaxBounds = 14;</code>
     */
    public RemoteDebug.RDPointF getEstimateMaxBounds() {
      return estimateMaxBounds_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : estimateMaxBounds_;
    }
    /**
     * <pre>
     * localiser max estimate bounds if goal is present
     * </pre>
     *
     * <code>optional .RDPointF estimateMaxBounds = 14;</code>
     */
    public RemoteDebug.RDPointFOrBuilder getEstimateMaxBoundsOrBuilder() {
      return getEstimateMaxBounds();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0) {
        output.writeUInt32(1, timestamp_);
      }
      if (frameIdx_ != 0) {
        output.writeUInt32(2, frameIdx_);
      }
      for (int i = 0; i < robots_.size(); i++) {
        output.writeMessage(3, robots_.get(i));
      }
      if (localiserEvals_ != 0) {
        output.writeInt32(4, localiserEvals_);
      }
      if (ballPos_ != null) {
        output.writeMessage(5, getBallPos());
      }
      if (localiserRate_ != 0) {
        output.writeInt32(6, localiserRate_);
      }
      if (yellowGoalPos_ != null) {
        output.writeMessage(7, getYellowGoalPos());
      }
      if (blueGoalPos_ != null) {
        output.writeMessage(8, getBlueGoalPos());
      }
      if (isYellowKnown_ != false) {
        output.writeBool(9, isYellowKnown_);
      }
      if (isBallKnown_ != false) {
        output.writeBool(10, isBallKnown_);
      }
      if (isBlueKnown_ != false) {
        output.writeBool(11, isBlueKnown_);
      }
      if (goalEstimate_ != null) {
        output.writeMessage(12, getGoalEstimate());
      }
      if (estimateMinBounds_ != null) {
        output.writeMessage(13, getEstimateMinBounds());
      }
      if (estimateMaxBounds_ != null) {
        output.writeMessage(14, getEstimateMaxBounds());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, timestamp_);
      }
      if (frameIdx_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, frameIdx_);
      }
      for (int i = 0; i < robots_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, robots_.get(i));
      }
      if (localiserEvals_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, localiserEvals_);
      }
      if (ballPos_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getBallPos());
      }
      if (localiserRate_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, localiserRate_);
      }
      if (yellowGoalPos_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getYellowGoalPos());
      }
      if (blueGoalPos_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getBlueGoalPos());
      }
      if (isYellowKnown_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isYellowKnown_);
      }
      if (isBallKnown_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, isBallKnown_);
      }
      if (isBlueKnown_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isBlueKnown_);
      }
      if (goalEstimate_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getGoalEstimate());
      }
      if (estimateMinBounds_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getEstimateMinBounds());
      }
      if (estimateMaxBounds_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getEstimateMaxBounds());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Replay.ReplayFrame)) {
        return super.equals(obj);
      }
      Replay.ReplayFrame other = (Replay.ReplayFrame) obj;

      boolean result = true;
      result = result && (getTimestamp()
          == other.getTimestamp());
      result = result && (getFrameIdx()
          == other.getFrameIdx());
      result = result && getRobotsList()
          .equals(other.getRobotsList());
      result = result && (getLocaliserEvals()
          == other.getLocaliserEvals());
      result = result && (hasBallPos() == other.hasBallPos());
      if (hasBallPos()) {
        result = result && getBallPos()
            .equals(other.getBallPos());
      }
      result = result && (getLocaliserRate()
          == other.getLocaliserRate());
      result = result && (hasYellowGoalPos() == other.hasYellowGoalPos());
      if (hasYellowGoalPos()) {
        result = result && getYellowGoalPos()
            .equals(other.getYellowGoalPos());
      }
      result = result && (hasBlueGoalPos() == other.hasBlueGoalPos());
      if (hasBlueGoalPos()) {
        result = result && getBlueGoalPos()
            .equals(other.getBlueGoalPos());
      }
      result = result && (getIsYellowKnown()
          == other.getIsYellowKnown());
      result = result && (getIsBallKnown()
          == other.getIsBallKnown());
      result = result && (getIsBlueKnown()
          == other.getIsBlueKnown());
      result = result && (hasGoalEstimate() == other.hasGoalEstimate());
      if (hasGoalEstimate()) {
        result = result && getGoalEstimate()
            .equals(other.getGoalEstimate());
      }
      result = result && (hasEstimateMinBounds() == other.hasEstimateMinBounds());
      if (hasEstimateMinBounds()) {
        result = result && getEstimateMinBounds()
            .equals(other.getEstimateMinBounds());
      }
      result = result && (hasEstimateMaxBounds() == other.hasEstimateMaxBounds());
      if (hasEstimateMaxBounds()) {
        result = result && getEstimateMaxBounds()
            .equals(other.getEstimateMaxBounds());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + getTimestamp();
      hash = (37 * hash) + FRAMEIDX_FIELD_NUMBER;
      hash = (53 * hash) + getFrameIdx();
      if (getRobotsCount() > 0) {
        hash = (37 * hash) + ROBOTS_FIELD_NUMBER;
        hash = (53 * hash) + getRobotsList().hashCode();
      }
      hash = (37 * hash) + LOCALISEREVALS_FIELD_NUMBER;
      hash = (53 * hash) + getLocaliserEvals();
      if (hasBallPos()) {
        hash = (37 * hash) + BALLPOS_FIELD_NUMBER;
        hash = (53 * hash) + getBallPos().hashCode();
      }
      hash = (37 * hash) + LOCALISERRATE_FIELD_NUMBER;
      hash = (53 * hash) + getLocaliserRate();
      if (hasYellowGoalPos()) {
        hash = (37 * hash) + YELLOWGOALPOS_FIELD_NUMBER;
        hash = (53 * hash) + getYellowGoalPos().hashCode();
      }
      if (hasBlueGoalPos()) {
        hash = (37 * hash) + BLUEGOALPOS_FIELD_NUMBER;
        hash = (53 * hash) + getBlueGoalPos().hashCode();
      }
      hash = (37 * hash) + ISYELLOWKNOWN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsYellowKnown());
      hash = (37 * hash) + ISBALLKNOWN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsBallKnown());
      hash = (37 * hash) + ISBLUEKNOWN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsBlueKnown());
      if (hasGoalEstimate()) {
        hash = (37 * hash) + GOALESTIMATE_FIELD_NUMBER;
        hash = (53 * hash) + getGoalEstimate().hashCode();
      }
      if (hasEstimateMinBounds()) {
        hash = (37 * hash) + ESTIMATEMINBOUNDS_FIELD_NUMBER;
        hash = (53 * hash) + getEstimateMinBounds().hashCode();
      }
      if (hasEstimateMaxBounds()) {
        hash = (37 * hash) + ESTIMATEMAXBOUNDS_FIELD_NUMBER;
        hash = (53 * hash) + getEstimateMaxBounds().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Replay.ReplayFrame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Replay.ReplayFrame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Replay.ReplayFrame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Replay.ReplayFrame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Replay.ReplayFrame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Replay.ReplayFrame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Replay.ReplayFrame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Replay.ReplayFrame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Replay.ReplayFrame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Replay.ReplayFrame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Replay.ReplayFrame prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The ReplayFrame is essentially a very stripped down version of DebugFrame with only the essentials for displaying
     * data in the Field View in Omicontrol
     * </pre>
     *
     * Protobuf type {@code ReplayFrame}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ReplayFrame)
        Replay.ReplayFrameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Replay.internal_static_ReplayFrame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Replay.internal_static_ReplayFrame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Replay.ReplayFrame.class, Replay.ReplayFrame.Builder.class);
      }

      // Construct using Replay.ReplayFrame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRobotsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        timestamp_ = 0;

        frameIdx_ = 0;

        if (robotsBuilder_ == null) {
          robots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          robotsBuilder_.clear();
        }
        localiserEvals_ = 0;

        if (ballPosBuilder_ == null) {
          ballPos_ = null;
        } else {
          ballPos_ = null;
          ballPosBuilder_ = null;
        }
        localiserRate_ = 0;

        if (yellowGoalPosBuilder_ == null) {
          yellowGoalPos_ = null;
        } else {
          yellowGoalPos_ = null;
          yellowGoalPosBuilder_ = null;
        }
        if (blueGoalPosBuilder_ == null) {
          blueGoalPos_ = null;
        } else {
          blueGoalPos_ = null;
          blueGoalPosBuilder_ = null;
        }
        isYellowKnown_ = false;

        isBallKnown_ = false;

        isBlueKnown_ = false;

        if (goalEstimateBuilder_ == null) {
          goalEstimate_ = null;
        } else {
          goalEstimate_ = null;
          goalEstimateBuilder_ = null;
        }
        if (estimateMinBoundsBuilder_ == null) {
          estimateMinBounds_ = null;
        } else {
          estimateMinBounds_ = null;
          estimateMinBoundsBuilder_ = null;
        }
        if (estimateMaxBoundsBuilder_ == null) {
          estimateMaxBounds_ = null;
        } else {
          estimateMaxBounds_ = null;
          estimateMaxBoundsBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Replay.internal_static_ReplayFrame_descriptor;
      }

      public Replay.ReplayFrame getDefaultInstanceForType() {
        return Replay.ReplayFrame.getDefaultInstance();
      }

      public Replay.ReplayFrame build() {
        Replay.ReplayFrame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Replay.ReplayFrame buildPartial() {
        Replay.ReplayFrame result = new Replay.ReplayFrame(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.timestamp_ = timestamp_;
        result.frameIdx_ = frameIdx_;
        if (robotsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            robots_ = java.util.Collections.unmodifiableList(robots_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.robots_ = robots_;
        } else {
          result.robots_ = robotsBuilder_.build();
        }
        result.localiserEvals_ = localiserEvals_;
        if (ballPosBuilder_ == null) {
          result.ballPos_ = ballPos_;
        } else {
          result.ballPos_ = ballPosBuilder_.build();
        }
        result.localiserRate_ = localiserRate_;
        if (yellowGoalPosBuilder_ == null) {
          result.yellowGoalPos_ = yellowGoalPos_;
        } else {
          result.yellowGoalPos_ = yellowGoalPosBuilder_.build();
        }
        if (blueGoalPosBuilder_ == null) {
          result.blueGoalPos_ = blueGoalPos_;
        } else {
          result.blueGoalPos_ = blueGoalPosBuilder_.build();
        }
        result.isYellowKnown_ = isYellowKnown_;
        result.isBallKnown_ = isBallKnown_;
        result.isBlueKnown_ = isBlueKnown_;
        if (goalEstimateBuilder_ == null) {
          result.goalEstimate_ = goalEstimate_;
        } else {
          result.goalEstimate_ = goalEstimateBuilder_.build();
        }
        if (estimateMinBoundsBuilder_ == null) {
          result.estimateMinBounds_ = estimateMinBounds_;
        } else {
          result.estimateMinBounds_ = estimateMinBoundsBuilder_.build();
        }
        if (estimateMaxBoundsBuilder_ == null) {
          result.estimateMaxBounds_ = estimateMaxBounds_;
        } else {
          result.estimateMaxBounds_ = estimateMaxBoundsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Replay.ReplayFrame) {
          return mergeFrom((Replay.ReplayFrame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Replay.ReplayFrame other) {
        if (other == Replay.ReplayFrame.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getFrameIdx() != 0) {
          setFrameIdx(other.getFrameIdx());
        }
        if (robotsBuilder_ == null) {
          if (!other.robots_.isEmpty()) {
            if (robots_.isEmpty()) {
              robots_ = other.robots_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRobotsIsMutable();
              robots_.addAll(other.robots_);
            }
            onChanged();
          }
        } else {
          if (!other.robots_.isEmpty()) {
            if (robotsBuilder_.isEmpty()) {
              robotsBuilder_.dispose();
              robotsBuilder_ = null;
              robots_ = other.robots_;
              bitField0_ = (bitField0_ & ~0x00000004);
              robotsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRobotsFieldBuilder() : null;
            } else {
              robotsBuilder_.addAllMessages(other.robots_);
            }
          }
        }
        if (other.getLocaliserEvals() != 0) {
          setLocaliserEvals(other.getLocaliserEvals());
        }
        if (other.hasBallPos()) {
          mergeBallPos(other.getBallPos());
        }
        if (other.getLocaliserRate() != 0) {
          setLocaliserRate(other.getLocaliserRate());
        }
        if (other.hasYellowGoalPos()) {
          mergeYellowGoalPos(other.getYellowGoalPos());
        }
        if (other.hasBlueGoalPos()) {
          mergeBlueGoalPos(other.getBlueGoalPos());
        }
        if (other.getIsYellowKnown() != false) {
          setIsYellowKnown(other.getIsYellowKnown());
        }
        if (other.getIsBallKnown() != false) {
          setIsBallKnown(other.getIsBallKnown());
        }
        if (other.getIsBlueKnown() != false) {
          setIsBlueKnown(other.getIsBlueKnown());
        }
        if (other.hasGoalEstimate()) {
          mergeGoalEstimate(other.getGoalEstimate());
        }
        if (other.hasEstimateMinBounds()) {
          mergeEstimateMinBounds(other.getEstimateMinBounds());
        }
        if (other.hasEstimateMaxBounds()) {
          mergeEstimateMaxBounds(other.getEstimateMaxBounds());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Replay.ReplayFrame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Replay.ReplayFrame) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int timestamp_ ;
      /**
       * <pre>
       * time in microseconds since last ReplayFrame
       * </pre>
       *
       * <code>optional uint32 timestamp = 1;</code>
       */
      public int getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * time in microseconds since last ReplayFrame
       * </pre>
       *
       * <code>optional uint32 timestamp = 1;</code>
       */
      public Builder setTimestamp(int value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time in microseconds since last ReplayFrame
       * </pre>
       *
       * <code>optional uint32 timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0;
        onChanged();
        return this;
      }

      private int frameIdx_ ;
      /**
       * <pre>
       * index of the frame in the replay file
       * </pre>
       *
       * <code>optional uint32 frameIdx = 2;</code>
       */
      public int getFrameIdx() {
        return frameIdx_;
      }
      /**
       * <pre>
       * index of the frame in the replay file
       * </pre>
       *
       * <code>optional uint32 frameIdx = 2;</code>
       */
      public Builder setFrameIdx(int value) {
        
        frameIdx_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * index of the frame in the replay file
       * </pre>
       *
       * <code>optional uint32 frameIdx = 2;</code>
       */
      public Builder clearFrameIdx() {
        
        frameIdx_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<RemoteDebug.RDRobot> robots_ =
        java.util.Collections.emptyList();
      private void ensureRobotsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          robots_ = new java.util.ArrayList<RemoteDebug.RDRobot>(robots_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          RemoteDebug.RDRobot, RemoteDebug.RDRobot.Builder, RemoteDebug.RDRobotOrBuilder> robotsBuilder_;

      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public java.util.List<RemoteDebug.RDRobot> getRobotsList() {
        if (robotsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(robots_);
        } else {
          return robotsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public int getRobotsCount() {
        if (robotsBuilder_ == null) {
          return robots_.size();
        } else {
          return robotsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public RemoteDebug.RDRobot getRobots(int index) {
        if (robotsBuilder_ == null) {
          return robots_.get(index);
        } else {
          return robotsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder setRobots(
          int index, RemoteDebug.RDRobot value) {
        if (robotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRobotsIsMutable();
          robots_.set(index, value);
          onChanged();
        } else {
          robotsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder setRobots(
          int index, RemoteDebug.RDRobot.Builder builderForValue) {
        if (robotsBuilder_ == null) {
          ensureRobotsIsMutable();
          robots_.set(index, builderForValue.build());
          onChanged();
        } else {
          robotsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder addRobots(RemoteDebug.RDRobot value) {
        if (robotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRobotsIsMutable();
          robots_.add(value);
          onChanged();
        } else {
          robotsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder addRobots(
          int index, RemoteDebug.RDRobot value) {
        if (robotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRobotsIsMutable();
          robots_.add(index, value);
          onChanged();
        } else {
          robotsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder addRobots(
          RemoteDebug.RDRobot.Builder builderForValue) {
        if (robotsBuilder_ == null) {
          ensureRobotsIsMutable();
          robots_.add(builderForValue.build());
          onChanged();
        } else {
          robotsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder addRobots(
          int index, RemoteDebug.RDRobot.Builder builderForValue) {
        if (robotsBuilder_ == null) {
          ensureRobotsIsMutable();
          robots_.add(index, builderForValue.build());
          onChanged();
        } else {
          robotsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder addAllRobots(
          java.lang.Iterable<? extends RemoteDebug.RDRobot> values) {
        if (robotsBuilder_ == null) {
          ensureRobotsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, robots_);
          onChanged();
        } else {
          robotsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder clearRobots() {
        if (robotsBuilder_ == null) {
          robots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          robotsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public Builder removeRobots(int index) {
        if (robotsBuilder_ == null) {
          ensureRobotsIsMutable();
          robots_.remove(index);
          onChanged();
        } else {
          robotsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public RemoteDebug.RDRobot.Builder getRobotsBuilder(
          int index) {
        return getRobotsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public RemoteDebug.RDRobotOrBuilder getRobotsOrBuilder(
          int index) {
        if (robotsBuilder_ == null) {
          return robots_.get(index);  } else {
          return robotsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public java.util.List<? extends RemoteDebug.RDRobotOrBuilder> 
           getRobotsOrBuilderList() {
        if (robotsBuilder_ != null) {
          return robotsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(robots_);
        }
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public RemoteDebug.RDRobot.Builder addRobotsBuilder() {
        return getRobotsFieldBuilder().addBuilder(
            RemoteDebug.RDRobot.getDefaultInstance());
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public RemoteDebug.RDRobot.Builder addRobotsBuilder(
          int index) {
        return getRobotsFieldBuilder().addBuilder(
            index, RemoteDebug.RDRobot.getDefaultInstance());
      }
      /**
       * <pre>
       * robot information, main thing we want to display
       * </pre>
       *
       * <code>repeated .RDRobot robots = 3;</code>
       */
      public java.util.List<RemoteDebug.RDRobot.Builder> 
           getRobotsBuilderList() {
        return getRobotsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          RemoteDebug.RDRobot, RemoteDebug.RDRobot.Builder, RemoteDebug.RDRobotOrBuilder> 
          getRobotsFieldBuilder() {
        if (robotsBuilder_ == null) {
          robotsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              RemoteDebug.RDRobot, RemoteDebug.RDRobot.Builder, RemoteDebug.RDRobotOrBuilder>(
                  robots_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          robots_ = null;
        }
        return robotsBuilder_;
      }

      private int localiserEvals_ ;
      /**
       * <pre>
       * average number of localiser evaluations
       * </pre>
       *
       * <code>optional int32 localiserEvals = 4;</code>
       */
      public int getLocaliserEvals() {
        return localiserEvals_;
      }
      /**
       * <pre>
       * average number of localiser evaluations
       * </pre>
       *
       * <code>optional int32 localiserEvals = 4;</code>
       */
      public Builder setLocaliserEvals(int value) {
        
        localiserEvals_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * average number of localiser evaluations
       * </pre>
       *
       * <code>optional int32 localiserEvals = 4;</code>
       */
      public Builder clearLocaliserEvals() {
        
        localiserEvals_ = 0;
        onChanged();
        return this;
      }

      private RemoteDebug.RDPointF ballPos_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> ballPosBuilder_;
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public boolean hasBallPos() {
        return ballPosBuilder_ != null || ballPos_ != null;
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public RemoteDebug.RDPointF getBallPos() {
        if (ballPosBuilder_ == null) {
          return ballPos_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : ballPos_;
        } else {
          return ballPosBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public Builder setBallPos(RemoteDebug.RDPointF value) {
        if (ballPosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ballPos_ = value;
          onChanged();
        } else {
          ballPosBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public Builder setBallPos(
          RemoteDebug.RDPointF.Builder builderForValue) {
        if (ballPosBuilder_ == null) {
          ballPos_ = builderForValue.build();
          onChanged();
        } else {
          ballPosBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public Builder mergeBallPos(RemoteDebug.RDPointF value) {
        if (ballPosBuilder_ == null) {
          if (ballPos_ != null) {
            ballPos_ =
              RemoteDebug.RDPointF.newBuilder(ballPos_).mergeFrom(value).buildPartial();
          } else {
            ballPos_ = value;
          }
          onChanged();
        } else {
          ballPosBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public Builder clearBallPos() {
        if (ballPosBuilder_ == null) {
          ballPos_ = null;
          onChanged();
        } else {
          ballPos_ = null;
          ballPosBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public RemoteDebug.RDPointF.Builder getBallPosBuilder() {
        
        onChanged();
        return getBallPosFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      public RemoteDebug.RDPointFOrBuilder getBallPosOrBuilder() {
        if (ballPosBuilder_ != null) {
          return ballPosBuilder_.getMessageOrBuilder();
        } else {
          return ballPos_ == null ?
              RemoteDebug.RDPointF.getDefaultInstance() : ballPos_;
        }
      }
      /**
       * <pre>
       * ball position in field coords
       * </pre>
       *
       * <code>optional .RDPointF ballPos = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> 
          getBallPosFieldBuilder() {
        if (ballPosBuilder_ == null) {
          ballPosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder>(
                  getBallPos(),
                  getParentForChildren(),
                  isClean());
          ballPos_ = null;
        }
        return ballPosBuilder_;
      }

      private int localiserRate_ ;
      /**
       * <pre>
       * localiser rate in Hz
       * </pre>
       *
       * <code>optional int32 localiserRate = 6;</code>
       */
      public int getLocaliserRate() {
        return localiserRate_;
      }
      /**
       * <pre>
       * localiser rate in Hz
       * </pre>
       *
       * <code>optional int32 localiserRate = 6;</code>
       */
      public Builder setLocaliserRate(int value) {
        
        localiserRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * localiser rate in Hz
       * </pre>
       *
       * <code>optional int32 localiserRate = 6;</code>
       */
      public Builder clearLocaliserRate() {
        
        localiserRate_ = 0;
        onChanged();
        return this;
      }

      private RemoteDebug.RDPointF yellowGoalPos_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> yellowGoalPosBuilder_;
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public boolean hasYellowGoalPos() {
        return yellowGoalPosBuilder_ != null || yellowGoalPos_ != null;
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public RemoteDebug.RDPointF getYellowGoalPos() {
        if (yellowGoalPosBuilder_ == null) {
          return yellowGoalPos_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : yellowGoalPos_;
        } else {
          return yellowGoalPosBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public Builder setYellowGoalPos(RemoteDebug.RDPointF value) {
        if (yellowGoalPosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          yellowGoalPos_ = value;
          onChanged();
        } else {
          yellowGoalPosBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public Builder setYellowGoalPos(
          RemoteDebug.RDPointF.Builder builderForValue) {
        if (yellowGoalPosBuilder_ == null) {
          yellowGoalPos_ = builderForValue.build();
          onChanged();
        } else {
          yellowGoalPosBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public Builder mergeYellowGoalPos(RemoteDebug.RDPointF value) {
        if (yellowGoalPosBuilder_ == null) {
          if (yellowGoalPos_ != null) {
            yellowGoalPos_ =
              RemoteDebug.RDPointF.newBuilder(yellowGoalPos_).mergeFrom(value).buildPartial();
          } else {
            yellowGoalPos_ = value;
          }
          onChanged();
        } else {
          yellowGoalPosBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public Builder clearYellowGoalPos() {
        if (yellowGoalPosBuilder_ == null) {
          yellowGoalPos_ = null;
          onChanged();
        } else {
          yellowGoalPos_ = null;
          yellowGoalPosBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public RemoteDebug.RDPointF.Builder getYellowGoalPosBuilder() {
        
        onChanged();
        return getYellowGoalPosFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      public RemoteDebug.RDPointFOrBuilder getYellowGoalPosOrBuilder() {
        if (yellowGoalPosBuilder_ != null) {
          return yellowGoalPosBuilder_.getMessageOrBuilder();
        } else {
          return yellowGoalPos_ == null ?
              RemoteDebug.RDPointF.getDefaultInstance() : yellowGoalPos_;
        }
      }
      /**
       * <pre>
       * yellow goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF yellowGoalPos = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> 
          getYellowGoalPosFieldBuilder() {
        if (yellowGoalPosBuilder_ == null) {
          yellowGoalPosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder>(
                  getYellowGoalPos(),
                  getParentForChildren(),
                  isClean());
          yellowGoalPos_ = null;
        }
        return yellowGoalPosBuilder_;
      }

      private RemoteDebug.RDPointF blueGoalPos_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> blueGoalPosBuilder_;
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public boolean hasBlueGoalPos() {
        return blueGoalPosBuilder_ != null || blueGoalPos_ != null;
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public RemoteDebug.RDPointF getBlueGoalPos() {
        if (blueGoalPosBuilder_ == null) {
          return blueGoalPos_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : blueGoalPos_;
        } else {
          return blueGoalPosBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public Builder setBlueGoalPos(RemoteDebug.RDPointF value) {
        if (blueGoalPosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          blueGoalPos_ = value;
          onChanged();
        } else {
          blueGoalPosBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public Builder setBlueGoalPos(
          RemoteDebug.RDPointF.Builder builderForValue) {
        if (blueGoalPosBuilder_ == null) {
          blueGoalPos_ = builderForValue.build();
          onChanged();
        } else {
          blueGoalPosBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public Builder mergeBlueGoalPos(RemoteDebug.RDPointF value) {
        if (blueGoalPosBuilder_ == null) {
          if (blueGoalPos_ != null) {
            blueGoalPos_ =
              RemoteDebug.RDPointF.newBuilder(blueGoalPos_).mergeFrom(value).buildPartial();
          } else {
            blueGoalPos_ = value;
          }
          onChanged();
        } else {
          blueGoalPosBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public Builder clearBlueGoalPos() {
        if (blueGoalPosBuilder_ == null) {
          blueGoalPos_ = null;
          onChanged();
        } else {
          blueGoalPos_ = null;
          blueGoalPosBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public RemoteDebug.RDPointF.Builder getBlueGoalPosBuilder() {
        
        onChanged();
        return getBlueGoalPosFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      public RemoteDebug.RDPointFOrBuilder getBlueGoalPosOrBuilder() {
        if (blueGoalPosBuilder_ != null) {
          return blueGoalPosBuilder_.getMessageOrBuilder();
        } else {
          return blueGoalPos_ == null ?
              RemoteDebug.RDPointF.getDefaultInstance() : blueGoalPos_;
        }
      }
      /**
       * <pre>
       * blue goal position in field coordinates
       * </pre>
       *
       * <code>optional .RDPointF blueGoalPos = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> 
          getBlueGoalPosFieldBuilder() {
        if (blueGoalPosBuilder_ == null) {
          blueGoalPosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder>(
                  getBlueGoalPos(),
                  getParentForChildren(),
                  isClean());
          blueGoalPos_ = null;
        }
        return blueGoalPosBuilder_;
      }

      private boolean isYellowKnown_ ;
      /**
       * <pre>
       * if the yellow goal position is known (it's visible)
       * </pre>
       *
       * <code>optional bool isYellowKnown = 9;</code>
       */
      public boolean getIsYellowKnown() {
        return isYellowKnown_;
      }
      /**
       * <pre>
       * if the yellow goal position is known (it's visible)
       * </pre>
       *
       * <code>optional bool isYellowKnown = 9;</code>
       */
      public Builder setIsYellowKnown(boolean value) {
        
        isYellowKnown_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if the yellow goal position is known (it's visible)
       * </pre>
       *
       * <code>optional bool isYellowKnown = 9;</code>
       */
      public Builder clearIsYellowKnown() {
        
        isYellowKnown_ = false;
        onChanged();
        return this;
      }

      private boolean isBallKnown_ ;
      /**
       * <pre>
       * if the blue goal position is known
       * </pre>
       *
       * <code>optional bool isBallKnown = 10;</code>
       */
      public boolean getIsBallKnown() {
        return isBallKnown_;
      }
      /**
       * <pre>
       * if the blue goal position is known
       * </pre>
       *
       * <code>optional bool isBallKnown = 10;</code>
       */
      public Builder setIsBallKnown(boolean value) {
        
        isBallKnown_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if the blue goal position is known
       * </pre>
       *
       * <code>optional bool isBallKnown = 10;</code>
       */
      public Builder clearIsBallKnown() {
        
        isBallKnown_ = false;
        onChanged();
        return this;
      }

      private boolean isBlueKnown_ ;
      /**
       * <pre>
       * if the ball position is known
       * </pre>
       *
       * <code>optional bool isBlueKnown = 11;</code>
       */
      public boolean getIsBlueKnown() {
        return isBlueKnown_;
      }
      /**
       * <pre>
       * if the ball position is known
       * </pre>
       *
       * <code>optional bool isBlueKnown = 11;</code>
       */
      public Builder setIsBlueKnown(boolean value) {
        
        isBlueKnown_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if the ball position is known
       * </pre>
       *
       * <code>optional bool isBlueKnown = 11;</code>
       */
      public Builder clearIsBlueKnown() {
        
        isBlueKnown_ = false;
        onChanged();
        return this;
      }

      private RemoteDebug.RDPointF goalEstimate_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> goalEstimateBuilder_;
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public boolean hasGoalEstimate() {
        return goalEstimateBuilder_ != null || goalEstimate_ != null;
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public RemoteDebug.RDPointF getGoalEstimate() {
        if (goalEstimateBuilder_ == null) {
          return goalEstimate_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : goalEstimate_;
        } else {
          return goalEstimateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public Builder setGoalEstimate(RemoteDebug.RDPointF value) {
        if (goalEstimateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          goalEstimate_ = value;
          onChanged();
        } else {
          goalEstimateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public Builder setGoalEstimate(
          RemoteDebug.RDPointF.Builder builderForValue) {
        if (goalEstimateBuilder_ == null) {
          goalEstimate_ = builderForValue.build();
          onChanged();
        } else {
          goalEstimateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public Builder mergeGoalEstimate(RemoteDebug.RDPointF value) {
        if (goalEstimateBuilder_ == null) {
          if (goalEstimate_ != null) {
            goalEstimate_ =
              RemoteDebug.RDPointF.newBuilder(goalEstimate_).mergeFrom(value).buildPartial();
          } else {
            goalEstimate_ = value;
          }
          onChanged();
        } else {
          goalEstimateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public Builder clearGoalEstimate() {
        if (goalEstimateBuilder_ == null) {
          goalEstimate_ = null;
          onChanged();
        } else {
          goalEstimate_ = null;
          goalEstimateBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public RemoteDebug.RDPointF.Builder getGoalEstimateBuilder() {
        
        onChanged();
        return getGoalEstimateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      public RemoteDebug.RDPointFOrBuilder getGoalEstimateOrBuilder() {
        if (goalEstimateBuilder_ != null) {
          return goalEstimateBuilder_.getMessageOrBuilder();
        } else {
          return goalEstimate_ == null ?
              RemoteDebug.RDPointF.getDefaultInstance() : goalEstimate_;
        }
      }
      /**
       * <pre>
       * the robot's position according to the goal estimate
       * </pre>
       *
       * <code>optional .RDPointF goalEstimate = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> 
          getGoalEstimateFieldBuilder() {
        if (goalEstimateBuilder_ == null) {
          goalEstimateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder>(
                  getGoalEstimate(),
                  getParentForChildren(),
                  isClean());
          goalEstimate_ = null;
        }
        return goalEstimateBuilder_;
      }

      private RemoteDebug.RDPointF estimateMinBounds_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> estimateMinBoundsBuilder_;
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public boolean hasEstimateMinBounds() {
        return estimateMinBoundsBuilder_ != null || estimateMinBounds_ != null;
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public RemoteDebug.RDPointF getEstimateMinBounds() {
        if (estimateMinBoundsBuilder_ == null) {
          return estimateMinBounds_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : estimateMinBounds_;
        } else {
          return estimateMinBoundsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public Builder setEstimateMinBounds(RemoteDebug.RDPointF value) {
        if (estimateMinBoundsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          estimateMinBounds_ = value;
          onChanged();
        } else {
          estimateMinBoundsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public Builder setEstimateMinBounds(
          RemoteDebug.RDPointF.Builder builderForValue) {
        if (estimateMinBoundsBuilder_ == null) {
          estimateMinBounds_ = builderForValue.build();
          onChanged();
        } else {
          estimateMinBoundsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public Builder mergeEstimateMinBounds(RemoteDebug.RDPointF value) {
        if (estimateMinBoundsBuilder_ == null) {
          if (estimateMinBounds_ != null) {
            estimateMinBounds_ =
              RemoteDebug.RDPointF.newBuilder(estimateMinBounds_).mergeFrom(value).buildPartial();
          } else {
            estimateMinBounds_ = value;
          }
          onChanged();
        } else {
          estimateMinBoundsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public Builder clearEstimateMinBounds() {
        if (estimateMinBoundsBuilder_ == null) {
          estimateMinBounds_ = null;
          onChanged();
        } else {
          estimateMinBounds_ = null;
          estimateMinBoundsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public RemoteDebug.RDPointF.Builder getEstimateMinBoundsBuilder() {
        
        onChanged();
        return getEstimateMinBoundsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      public RemoteDebug.RDPointFOrBuilder getEstimateMinBoundsOrBuilder() {
        if (estimateMinBoundsBuilder_ != null) {
          return estimateMinBoundsBuilder_.getMessageOrBuilder();
        } else {
          return estimateMinBounds_ == null ?
              RemoteDebug.RDPointF.getDefaultInstance() : estimateMinBounds_;
        }
      }
      /**
       * <pre>
       * localiser min estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMinBounds = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> 
          getEstimateMinBoundsFieldBuilder() {
        if (estimateMinBoundsBuilder_ == null) {
          estimateMinBoundsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder>(
                  getEstimateMinBounds(),
                  getParentForChildren(),
                  isClean());
          estimateMinBounds_ = null;
        }
        return estimateMinBoundsBuilder_;
      }

      private RemoteDebug.RDPointF estimateMaxBounds_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> estimateMaxBoundsBuilder_;
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public boolean hasEstimateMaxBounds() {
        return estimateMaxBoundsBuilder_ != null || estimateMaxBounds_ != null;
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public RemoteDebug.RDPointF getEstimateMaxBounds() {
        if (estimateMaxBoundsBuilder_ == null) {
          return estimateMaxBounds_ == null ? RemoteDebug.RDPointF.getDefaultInstance() : estimateMaxBounds_;
        } else {
          return estimateMaxBoundsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public Builder setEstimateMaxBounds(RemoteDebug.RDPointF value) {
        if (estimateMaxBoundsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          estimateMaxBounds_ = value;
          onChanged();
        } else {
          estimateMaxBoundsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public Builder setEstimateMaxBounds(
          RemoteDebug.RDPointF.Builder builderForValue) {
        if (estimateMaxBoundsBuilder_ == null) {
          estimateMaxBounds_ = builderForValue.build();
          onChanged();
        } else {
          estimateMaxBoundsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public Builder mergeEstimateMaxBounds(RemoteDebug.RDPointF value) {
        if (estimateMaxBoundsBuilder_ == null) {
          if (estimateMaxBounds_ != null) {
            estimateMaxBounds_ =
              RemoteDebug.RDPointF.newBuilder(estimateMaxBounds_).mergeFrom(value).buildPartial();
          } else {
            estimateMaxBounds_ = value;
          }
          onChanged();
        } else {
          estimateMaxBoundsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public Builder clearEstimateMaxBounds() {
        if (estimateMaxBoundsBuilder_ == null) {
          estimateMaxBounds_ = null;
          onChanged();
        } else {
          estimateMaxBounds_ = null;
          estimateMaxBoundsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public RemoteDebug.RDPointF.Builder getEstimateMaxBoundsBuilder() {
        
        onChanged();
        return getEstimateMaxBoundsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      public RemoteDebug.RDPointFOrBuilder getEstimateMaxBoundsOrBuilder() {
        if (estimateMaxBoundsBuilder_ != null) {
          return estimateMaxBoundsBuilder_.getMessageOrBuilder();
        } else {
          return estimateMaxBounds_ == null ?
              RemoteDebug.RDPointF.getDefaultInstance() : estimateMaxBounds_;
        }
      }
      /**
       * <pre>
       * localiser max estimate bounds if goal is present
       * </pre>
       *
       * <code>optional .RDPointF estimateMaxBounds = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder> 
          getEstimateMaxBoundsFieldBuilder() {
        if (estimateMaxBoundsBuilder_ == null) {
          estimateMaxBoundsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RemoteDebug.RDPointF, RemoteDebug.RDPointF.Builder, RemoteDebug.RDPointFOrBuilder>(
                  getEstimateMaxBounds(),
                  getParentForChildren(),
                  isClean());
          estimateMaxBounds_ = null;
        }
        return estimateMaxBoundsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:ReplayFrame)
    }

    // @@protoc_insertion_point(class_scope:ReplayFrame)
    private static final Replay.ReplayFrame DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Replay.ReplayFrame();
    }

    public static Replay.ReplayFrame getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReplayFrame>
        PARSER = new com.google.protobuf.AbstractParser<ReplayFrame>() {
      public ReplayFrame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ReplayFrame(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReplayFrame> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReplayFrame> getParserForType() {
      return PARSER;
    }

    public Replay.ReplayFrame getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReplayFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ReplayFile)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * width of images from the camera in pixels, must stay constant across all frames
     * </pre>
     *
     * <code>optional int32 frameWidth = 1;</code>
     */
    int getFrameWidth();

    /**
     * <pre>
     * height of frames from the camera in pixels, must stay constant
     * </pre>
     *
     * <code>optional int32 frameHeight = 2;</code>
     */
    int getFrameHeight();

    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    java.util.List<Replay.ReplayFrame> 
        getFramesList();
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    Replay.ReplayFrame getFrames(int index);
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    int getFramesCount();
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    java.util.List<? extends Replay.ReplayFrameOrBuilder> 
        getFramesOrBuilderList();
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    Replay.ReplayFrameOrBuilder getFramesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code ReplayFile}
   */
  public  static final class ReplayFile extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ReplayFile)
      ReplayFileOrBuilder {
    // Use ReplayFile.newBuilder() to construct.
    private ReplayFile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReplayFile() {
      frameWidth_ = 0;
      frameHeight_ = 0;
      frames_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ReplayFile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              frameWidth_ = input.readInt32();
              break;
            }
            case 16: {

              frameHeight_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                frames_ = new java.util.ArrayList<Replay.ReplayFrame>();
                mutable_bitField0_ |= 0x00000004;
              }
              frames_.add(
                  input.readMessage(Replay.ReplayFrame.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          frames_ = java.util.Collections.unmodifiableList(frames_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Replay.internal_static_ReplayFile_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Replay.internal_static_ReplayFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Replay.ReplayFile.class, Replay.ReplayFile.Builder.class);
    }

    private int bitField0_;
    public static final int FRAMEWIDTH_FIELD_NUMBER = 1;
    private int frameWidth_;
    /**
     * <pre>
     * width of images from the camera in pixels, must stay constant across all frames
     * </pre>
     *
     * <code>optional int32 frameWidth = 1;</code>
     */
    public int getFrameWidth() {
      return frameWidth_;
    }

    public static final int FRAMEHEIGHT_FIELD_NUMBER = 2;
    private int frameHeight_;
    /**
     * <pre>
     * height of frames from the camera in pixels, must stay constant
     * </pre>
     *
     * <code>optional int32 frameHeight = 2;</code>
     */
    public int getFrameHeight() {
      return frameHeight_;
    }

    public static final int FRAMES_FIELD_NUMBER = 3;
    private java.util.List<Replay.ReplayFrame> frames_;
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    public java.util.List<Replay.ReplayFrame> getFramesList() {
      return frames_;
    }
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    public java.util.List<? extends Replay.ReplayFrameOrBuilder> 
        getFramesOrBuilderList() {
      return frames_;
    }
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    public int getFramesCount() {
      return frames_.size();
    }
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    public Replay.ReplayFrame getFrames(int index) {
      return frames_.get(index);
    }
    /**
     * <pre>
     * all the recorded frames of the replay
     * </pre>
     *
     * <code>repeated .ReplayFrame frames = 3;</code>
     */
    public Replay.ReplayFrameOrBuilder getFramesOrBuilder(
        int index) {
      return frames_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (frameWidth_ != 0) {
        output.writeInt32(1, frameWidth_);
      }
      if (frameHeight_ != 0) {
        output.writeInt32(2, frameHeight_);
      }
      for (int i = 0; i < frames_.size(); i++) {
        output.writeMessage(3, frames_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (frameWidth_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, frameWidth_);
      }
      if (frameHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, frameHeight_);
      }
      for (int i = 0; i < frames_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, frames_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Replay.ReplayFile)) {
        return super.equals(obj);
      }
      Replay.ReplayFile other = (Replay.ReplayFile) obj;

      boolean result = true;
      result = result && (getFrameWidth()
          == other.getFrameWidth());
      result = result && (getFrameHeight()
          == other.getFrameHeight());
      result = result && getFramesList()
          .equals(other.getFramesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + FRAMEWIDTH_FIELD_NUMBER;
      hash = (53 * hash) + getFrameWidth();
      hash = (37 * hash) + FRAMEHEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getFrameHeight();
      if (getFramesCount() > 0) {
        hash = (37 * hash) + FRAMES_FIELD_NUMBER;
        hash = (53 * hash) + getFramesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Replay.ReplayFile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Replay.ReplayFile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Replay.ReplayFile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Replay.ReplayFile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Replay.ReplayFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Replay.ReplayFile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Replay.ReplayFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Replay.ReplayFile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Replay.ReplayFile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Replay.ReplayFile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Replay.ReplayFile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ReplayFile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ReplayFile)
        Replay.ReplayFileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Replay.internal_static_ReplayFile_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Replay.internal_static_ReplayFile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Replay.ReplayFile.class, Replay.ReplayFile.Builder.class);
      }

      // Construct using Replay.ReplayFile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFramesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        frameWidth_ = 0;

        frameHeight_ = 0;

        if (framesBuilder_ == null) {
          frames_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          framesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Replay.internal_static_ReplayFile_descriptor;
      }

      public Replay.ReplayFile getDefaultInstanceForType() {
        return Replay.ReplayFile.getDefaultInstance();
      }

      public Replay.ReplayFile build() {
        Replay.ReplayFile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Replay.ReplayFile buildPartial() {
        Replay.ReplayFile result = new Replay.ReplayFile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.frameWidth_ = frameWidth_;
        result.frameHeight_ = frameHeight_;
        if (framesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            frames_ = java.util.Collections.unmodifiableList(frames_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.frames_ = frames_;
        } else {
          result.frames_ = framesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Replay.ReplayFile) {
          return mergeFrom((Replay.ReplayFile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Replay.ReplayFile other) {
        if (other == Replay.ReplayFile.getDefaultInstance()) return this;
        if (other.getFrameWidth() != 0) {
          setFrameWidth(other.getFrameWidth());
        }
        if (other.getFrameHeight() != 0) {
          setFrameHeight(other.getFrameHeight());
        }
        if (framesBuilder_ == null) {
          if (!other.frames_.isEmpty()) {
            if (frames_.isEmpty()) {
              frames_ = other.frames_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFramesIsMutable();
              frames_.addAll(other.frames_);
            }
            onChanged();
          }
        } else {
          if (!other.frames_.isEmpty()) {
            if (framesBuilder_.isEmpty()) {
              framesBuilder_.dispose();
              framesBuilder_ = null;
              frames_ = other.frames_;
              bitField0_ = (bitField0_ & ~0x00000004);
              framesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFramesFieldBuilder() : null;
            } else {
              framesBuilder_.addAllMessages(other.frames_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Replay.ReplayFile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Replay.ReplayFile) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int frameWidth_ ;
      /**
       * <pre>
       * width of images from the camera in pixels, must stay constant across all frames
       * </pre>
       *
       * <code>optional int32 frameWidth = 1;</code>
       */
      public int getFrameWidth() {
        return frameWidth_;
      }
      /**
       * <pre>
       * width of images from the camera in pixels, must stay constant across all frames
       * </pre>
       *
       * <code>optional int32 frameWidth = 1;</code>
       */
      public Builder setFrameWidth(int value) {
        
        frameWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * width of images from the camera in pixels, must stay constant across all frames
       * </pre>
       *
       * <code>optional int32 frameWidth = 1;</code>
       */
      public Builder clearFrameWidth() {
        
        frameWidth_ = 0;
        onChanged();
        return this;
      }

      private int frameHeight_ ;
      /**
       * <pre>
       * height of frames from the camera in pixels, must stay constant
       * </pre>
       *
       * <code>optional int32 frameHeight = 2;</code>
       */
      public int getFrameHeight() {
        return frameHeight_;
      }
      /**
       * <pre>
       * height of frames from the camera in pixels, must stay constant
       * </pre>
       *
       * <code>optional int32 frameHeight = 2;</code>
       */
      public Builder setFrameHeight(int value) {
        
        frameHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * height of frames from the camera in pixels, must stay constant
       * </pre>
       *
       * <code>optional int32 frameHeight = 2;</code>
       */
      public Builder clearFrameHeight() {
        
        frameHeight_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<Replay.ReplayFrame> frames_ =
        java.util.Collections.emptyList();
      private void ensureFramesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          frames_ = new java.util.ArrayList<Replay.ReplayFrame>(frames_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          Replay.ReplayFrame, Replay.ReplayFrame.Builder, Replay.ReplayFrameOrBuilder> framesBuilder_;

      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public java.util.List<Replay.ReplayFrame> getFramesList() {
        if (framesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(frames_);
        } else {
          return framesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public int getFramesCount() {
        if (framesBuilder_ == null) {
          return frames_.size();
        } else {
          return framesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Replay.ReplayFrame getFrames(int index) {
        if (framesBuilder_ == null) {
          return frames_.get(index);
        } else {
          return framesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder setFrames(
          int index, Replay.ReplayFrame value) {
        if (framesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFramesIsMutable();
          frames_.set(index, value);
          onChanged();
        } else {
          framesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder setFrames(
          int index, Replay.ReplayFrame.Builder builderForValue) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.set(index, builderForValue.build());
          onChanged();
        } else {
          framesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder addFrames(Replay.ReplayFrame value) {
        if (framesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFramesIsMutable();
          frames_.add(value);
          onChanged();
        } else {
          framesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder addFrames(
          int index, Replay.ReplayFrame value) {
        if (framesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFramesIsMutable();
          frames_.add(index, value);
          onChanged();
        } else {
          framesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder addFrames(
          Replay.ReplayFrame.Builder builderForValue) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.add(builderForValue.build());
          onChanged();
        } else {
          framesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder addFrames(
          int index, Replay.ReplayFrame.Builder builderForValue) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.add(index, builderForValue.build());
          onChanged();
        } else {
          framesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder addAllFrames(
          java.lang.Iterable<? extends Replay.ReplayFrame> values) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, frames_);
          onChanged();
        } else {
          framesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder clearFrames() {
        if (framesBuilder_ == null) {
          frames_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          framesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Builder removeFrames(int index) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.remove(index);
          onChanged();
        } else {
          framesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Replay.ReplayFrame.Builder getFramesBuilder(
          int index) {
        return getFramesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Replay.ReplayFrameOrBuilder getFramesOrBuilder(
          int index) {
        if (framesBuilder_ == null) {
          return frames_.get(index);  } else {
          return framesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public java.util.List<? extends Replay.ReplayFrameOrBuilder> 
           getFramesOrBuilderList() {
        if (framesBuilder_ != null) {
          return framesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(frames_);
        }
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Replay.ReplayFrame.Builder addFramesBuilder() {
        return getFramesFieldBuilder().addBuilder(
            Replay.ReplayFrame.getDefaultInstance());
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public Replay.ReplayFrame.Builder addFramesBuilder(
          int index) {
        return getFramesFieldBuilder().addBuilder(
            index, Replay.ReplayFrame.getDefaultInstance());
      }
      /**
       * <pre>
       * all the recorded frames of the replay
       * </pre>
       *
       * <code>repeated .ReplayFrame frames = 3;</code>
       */
      public java.util.List<Replay.ReplayFrame.Builder> 
           getFramesBuilderList() {
        return getFramesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          Replay.ReplayFrame, Replay.ReplayFrame.Builder, Replay.ReplayFrameOrBuilder> 
          getFramesFieldBuilder() {
        if (framesBuilder_ == null) {
          framesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              Replay.ReplayFrame, Replay.ReplayFrame.Builder, Replay.ReplayFrameOrBuilder>(
                  frames_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          frames_ = null;
        }
        return framesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:ReplayFile)
    }

    // @@protoc_insertion_point(class_scope:ReplayFile)
    private static final Replay.ReplayFile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Replay.ReplayFile();
    }

    public static Replay.ReplayFile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReplayFile>
        PARSER = new com.google.protobuf.AbstractParser<ReplayFile>() {
      public ReplayFile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ReplayFile(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReplayFile> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReplayFile> getParserForType() {
      return PARSER;
    }

    public Replay.ReplayFile getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ReplayFrame_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ReplayFrame_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ReplayFile_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ReplayFile_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014Replay.proto\032\021RemoteDebug.proto\"\207\003\n\013Re" +
      "playFrame\022\021\n\ttimestamp\030\001 \001(\r\022\020\n\010frameIdx" +
      "\030\002 \001(\r\022\030\n\006robots\030\003 \003(\0132\010.RDRobot\022\026\n\016loca" +
      "liserEvals\030\004 \001(\005\022\032\n\007ballPos\030\005 \001(\0132\t.RDPo" +
      "intF\022\025\n\rlocaliserRate\030\006 \001(\005\022 \n\ryellowGoa" +
      "lPos\030\007 \001(\0132\t.RDPointF\022\036\n\013blueGoalPos\030\010 \001" +
      "(\0132\t.RDPointF\022\025\n\risYellowKnown\030\t \001(\010\022\023\n\013" +
      "isBallKnown\030\n \001(\010\022\023\n\013isBlueKnown\030\013 \001(\010\022\037" +
      "\n\014goalEstimate\030\014 \001(\0132\t.RDPointF\022$\n\021estim" +
      "ateMinBounds\030\r \001(\0132\t.RDPointF\022$\n\021estimat",
      "eMaxBounds\030\016 \001(\0132\t.RDPointF\"S\n\nReplayFil" +
      "e\022\022\n\nframeWidth\030\001 \001(\005\022\023\n\013frameHeight\030\002 \001" +
      "(\005\022\034\n\006frames\030\003 \003(\0132\014.ReplayFrameb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          RemoteDebug.getDescriptor(),
        }, assigner);
    internal_static_ReplayFrame_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ReplayFrame_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ReplayFrame_descriptor,
        new java.lang.String[] { "Timestamp", "FrameIdx", "Robots", "LocaliserEvals", "BallPos", "LocaliserRate", "YellowGoalPos", "BlueGoalPos", "IsYellowKnown", "IsBallKnown", "IsBlueKnown", "GoalEstimate", "EstimateMinBounds", "EstimateMaxBounds", });
    internal_static_ReplayFile_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_ReplayFile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ReplayFile_descriptor,
        new java.lang.String[] { "FrameWidth", "FrameHeight", "Frames", });
    RemoteDebug.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
